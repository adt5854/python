  pi = 3.14
print(type(pi))- show the type of the varriable
-----------------------------------------------------
a, b, c = 1, 2, 3
print(a, b, c)
-----------------------------------------------------
x = [1, 2, [3, 4, 5], 6, 7] # this is nested list
print x[2]
# Output: [3, 4, 5]
print x[2][1]
# Output: 4
-----------------------------------------------------
def my_function(): # This is a function definition. Note the colon (:)
a = 2 # This line belongs to the function because it's indented
return a # This line also belongs to the same function
print(my_function()) # This line is OUTSIDE the function block
-----------------------------------------------------
if a > b: # If block starts here
print(a) # This is part of the if block
else: # else must be at the same level as if
print(b) # This line is part of the else block
-----------------------------------------------------
x or y # if x is False then y otherwise x
x and y # if x is False then x otherwise y
not x # if x is True then False, otherwise True
-----------------------------------------------------
issubclass(bool, int) # True
isinstance(True, bool) # True
isinstance(False, bool) # True
-----------------------------------------------------
True + False == 1 # 1 + 0 == 1
True * True == 1 # 1 * 1 == 1
-----------------------------------------------------
int_list = [1, 2, 3]
string_list = ['abc', 'defghi']
empty_list = []
mixed_list = [1, 'abc', True, 2.34, None]
nested_list = [['a', 'b', 'c'], [1, 2, 3]]
list.extend(anotherList)
-----------------------------------------------------
names = ['Alice', 'Bob', 'Craig', 'Diana', 'Eric']
print(names[0]) # Alice
print(names[2]) # Craig
print(names[-1]) # Eric
print(names[-4]) # Bob
names[0] = 'Ann'
print(names) #Outputs ['Ann', 'Bob', 'Craig', 'Diana', 'Eric']
-----------------------------------------------------
names = ['Alice', 'Bob', 'Craig', 'Diana', 'Eric']
names.append("Sia")
print(names)
# Outputs ['Alice', 'Bob', 'Craig', 'Diana', 'Eric', 'Sia']
-----------------------------------------------------
names.insert(1, "Nikki")
print(names)
# Outputs ['Alice', 'Nikki', 'Bob', 'Craig', 'Diana', 'Eric', 'Sia']
-----------------------------------------------------
names.remove("Bob")
print(names) # Outputs ['Alice', 'Nikki', 'Craig', 'Diana', 'Eric', 'Sia']
-----------------------------------------------------
names.pop() # Outputs ['Alice', 'Nikki', 'Craig', 'Diana', 'Eric']
-----------------------------------------------------
list2=list.copy()
-----------------------------------------------------
name.index("Alice")
0
-----------------------------------------------------
len(names)
6
-----------------------------------------------------
a = [1, 1, 1, 2, 3, 4]
a.count(1)
3
-----------------------------------------------------
list.sort() #alpabetical order
-----------------------------------------------------
a.reverse()
[4, 3, 2, 1, 1, 1]
# or
a[::-1]
[4, 3, 2, 1, 1, 1]
-----------------------------------------------------
ip_address = ('10.20.30.40', 8080)
list which doesnt change
-----------------------------------------------------
from collections import defaultdict
state_capitals = {
 'Arkansas': 'Little Rock',
 'Colorado': 'Denver',
 'California': 'Sacramento',
 'Georgia': 'Atlanta'
}
state_capitals = defaultdict(lambda: 'it doesnt exist')
ca_capital = state_capitals['California']
-----------------------------------------------------
pow(2,3) #8
-----------------------------------------------------
import math
dir(math)  #show all the commands
-----------------------------------------------------
for function page U have to open a new python file in the
same folder.
you type "import fileName" at the top of the page
and U call for the function with "nameOfTheFile.nameOfTheFunction()"
-----------------------------------------------------
import datetime
today = datetime.datetime.now()
str(today) # Output: '2016-09-15 06:58:46.915000'
repr(today) # Output: 'datetime.datetime(2016, 9, 15, 6, 58, 46, 915000)'
-----------------------------------------------------
b = frozenset('asdfagsa')
print(b)
> frozenset({'f', 'g', 'd', 'a', 's'})
-----------------------------------------------------
tuple = (123,'hello')
print(tuple) #will output whole tuple. (123,'hello')
print(tuple[0]) #will output first value. (123)
-----------------------------------------------------
txt = "For only {price} dollars!"
print(txt.format(price = 49))
-----------------------------------------------------
from enum import Enum
class Color(Enum):
red = 1
green = 2
blue = 3
print(Color.red) # Color.red
print(Color(1)) # Color.red
print(Color['red']) # Color.red
-----------------------------------------------------
# common
{1, 2, 3, 4, 5}.intersection({3, 4, 5, 6}) # {3, 4, 5}
{1, 2, 3, 4, 5} & {3, 4, 5, 6} # {3, 4, 5}
-----------------------------------------------------
# Union
{1, 2, 3, 4, 5}.union({3, 4, 5, 6}) # {1, 2, 3, 4, 5, 6}
{1, 2, 3, 4, 5} | {3, 4, 5, 6} # {1, 2, 3, 4, 5, 6}
-----------------------------------------------------
# Difference
{1, 2, 3, 4}.difference({2, 3, 5}) # {1, 4}
{1, 2, 3, 4} - {2, 3, 5} # {1, 4}
-----------------------------------------------------
# Existence check
2 in {1,2,3} # True
4 in {1,2,3} # False
4 not in {1,2,3} # True
-----------------------------------------------------
parrot = "Norwegian Blue"

print(parrot[0:6])  #Norweg
print(parrot[3:5])  #we
print(parrot[0:9])  #Norwegian
print(parrot[:9])   #Norwegian

print(parrot[10:14])#Blue
print(parrot[10:])  #Blue

print(parrot[:6])   #Norweg
print(parrot[6:])   #ian Blue

print(parrot[:6] + parrot[6:])#Norwegian Blue

print(parrot[:])    #Norwegian Blue

print(parrot[0:6:2]) #Nre

letters = "abcdefghijklmnopqrstuvwxyz"

backwards = letters[::-1]

print(backwards) #zyxwvutsrqponmlkjihgfedcba
------------------------------------------------------
myTuple = ("John", "Peter", "Vicky") 
x = ", ".join(myTuple)
print(x)
------------------------------------------------------
age=24
name="Tim"
print(name + f" is {age} years old")
------------------------------------------------------
print(f"Pi is approximately {22/7:12.50f}")
print("PI is approximately %f" % (22/7) 
------------------------------------------------------
age=24
major="years"
minor="month"
print("My age is %d %s, %d %s" % (age, major, 6, minor))
------------------------------------------------------
age=54
if age<30:
	print("you are young")
elif age<50:
	print("you are ok")
else :
	print("your are old guy")
------------------------------------------------------
name=input("whats your name?")
if name:
	print("hello {}".format(name))
else:
	print("are you the man with no name?")
------------------------------------------------------
for character in parrot:
	print(character)
------------------------------------------------------
for i in range (10,0,-2):
	print("i is now{}".format(i))
------------------------------------------------------
while i<10:
	print("i is now {}".format(i))
	i+=1
------------------------------------------------------
chosen_exit = input("Please choose a direction:")
if chosen_exit.casefold()=="quit":
	print("Game over")
	break
------------------------------------------------------
x = 23

x += 1
print(x)    # 24

x -= 4
print(x)    # 20

x *= 5
print(x)    # 100

x //= 4
print(x)    # 25

x /= 5
print(x)    # 5.0 - note conversion from int to float

x **= 2
print(x)    # 25.0 - x still represents a float

x %= 5
print(x)    # 0.0 - 25 is exactly divisible by 5

greeting = "Good "

greeting += "morning"
print(greeting)

greeting *= 5
print(greeting)
------------------------------------------------------
shopping_list += ["cookies"]
------------------------------------------------------
for index, character in enumerate("abcdefghijklmnopqrstuvwxyz"):
	print("{} . {}".format(index,character))
